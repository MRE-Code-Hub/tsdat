pipeline:
class_name: mypipelines.PressureSensorIngest:
name: "dockx-presssure-sensor-ingest"
site: "dockx"
processing_interval: "86400 seconds"

# TODO: need a generic storage layer (like maybe part of the I/O API?)
# to read in files from anywhere
#storage:

datastreams:
  pressure-sensor.00:
    inputs:
      - raw_data:
        file_pattern: '*.tdms'
        source_url: '....s3'

  # a0 converts raw data to MHKiT-Cloud standard format
  pressure-sensor.a0:
    input_datastreams: 
      - pressure-sensor.00:
    global_attrs:
    dims:
    variables: 'variables_a0'

  # b1 applies QC to standard data
  pressure-sensor.b1:
    input_datastreams: 
      - pressure-sensor.a0:

  pressure-sensor.b2:
    input_datastreams: 
      - pressure-sensor.a0:
    variables: 
      import: 'variables_b2'
      exclude:
        - 
      add:
        - MLLW


---
# Variable metadata for the variables in your xarray Dataset
variables_a0:
  # All variables should define data_type and units attributes.
  # All other attributes are optional depending upon which
  # QC tests you use.
  time:
    source_name: "Date Time, GMT -0700"
    source_units: "seconds since 1970-01-01T00:00:00 -0700"
    attrs:
      data_type: datetime64 # Required to meet cf standards

      # Note:  you must use this exact units for time which must be in UTC
      units: "seconds since 1970-01-01T00:00:00" # Required

      description: "UTC timestamp"
      missing_value: -9999

    # Set coordinate_variable to true if this is a coordinate variable for
    # your dataset.  It is assumed that the dimension name will be the
    # same as the coordinate variable name.
    coodinate_variable: true

  temp_mean:
    attrs:
      data_type: float
      units: degC
      description: "Mean temperature"
      valid_delta: 10
      valid_min: -60
      valid_max: 30
      missing_value: -9999
    dims: [time]

  vapor_pressure_mean:
    attrs:
      data_type: float
      units: kPa
      description: "Vapor pressure mean, calculated"
      valid_min: 0.001
      valid_max: 4.3
      valid_delta: 1
      missing_value: -9999
    dims: [time]
---
qc:
  tests:
      validate_timestamp:  # label that can be used to reference this test in API methods
        qc_bit: 1 # bit to flip if the test fails
        description: "Time is missing or invalid."
        assessment: Bad  # options are Bad or Indeterminate
        variables: # Variables for which to apply this test
          - time

        operators:  # Can list multiple operators - executed in sequence
          tsdat.qc.operators.CheckMissing:
          tsdat.qc.operators.CheckMonotonic:
            direction: increasing    # Each operator can include any arbitrary list of parameters
            interval: 60             # For now this is in seconds - later we can specify units

        error_handlers: # Can list multiple error handlers - executed in sequence
          tsdat.qc.error_handlers.ReplaceMissing:  # if test fails, replace with missing_value

      missing:
          qc_bit: 2
          description: "Value is equal to missing_value"
          assessment: Bad
          variables:
            - ALL  # keyword to apply test to all variables
          exclude: # variables to exclude from the test
            - time
          operators:
            tsdat.qc.operators.CheckMissing:

      valid_min:
          qc_bit: 3
          description: "Value is less than the valid_min."
          assessment: Bad
          variables:
            - ALL
          operators:
            tsdat.qc.operators.CheckValidMin:
          error_handlers:
            tsdat.qc.error_handlers.ReplaceMissing:  # if test fails, replace with missing_value

      valid_max:
          qc_bit: 4
          description: "Value is greater than the valid_max."
          assessment: Bad
          variables:
            - ALL
          operators:
            tsdat.qc.operators.CheckValidMax:
          error_handlers:
            tsdat.qc.error_handlers.ReplaceMissing:  # if test fails, replace with missing_value

      valid_delta:
          qc_bit: 5
          description: "Difference between current and previous values exceeds valid_delta."
          assessment: Indeterminate
          variables:
            - ALL
          operators:
            tsdat.qc.operators.CheckValidDelta:
          error_handlers:
            tsdat.qc.error_handlers.ReplaceMissing:  # if test fails, replace with missing_value
